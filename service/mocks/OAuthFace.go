// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "baal/model"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// OAuthFace is an autogenerated mock type for the OAuthFace type
type OAuthFace struct {
	mock.Mock
}

// GetInfo provides a mock function with given fields: requestURL, token
func (_m *OAuthFace) GetInfo(requestURL string, token *oauth2.Token) (*model.GoogleOAuthUserInfo, error) {
	ret := _m.Called(requestURL, token)

	var r0 *model.GoogleOAuthUserInfo
	if rf, ok := ret.Get(0).(func(string, *oauth2.Token) *model.GoogleOAuthUserInfo); ok {
		r0 = rf(requestURL, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GoogleOAuthUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *oauth2.Token) error); ok {
		r1 = rf(requestURL, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginURL provides a mock function with given fields: requestURL, state
func (_m *OAuthFace) GetLoginURL(requestURL string, state string) string {
	ret := _m.Called(requestURL, state)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(requestURL, state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetToken provides a mock function with given fields: requestURL, code
func (_m *OAuthFace) GetToken(requestURL string, code string) (*oauth2.Token, error) {
	ret := _m.Called(requestURL, code)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(string, string) *oauth2.Token); ok {
		r0 = rf(requestURL, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(requestURL, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewState provides a mock function with given fields:
func (_m *OAuthFace) NewState() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SaveToken provides a mock function with given fields: userID, token
func (_m *OAuthFace) SaveToken(userID uint, token *oauth2.Token) (*model.OAuthSchema, error) {
	ret := _m.Called(userID, token)

	var r0 *model.OAuthSchema
	if rf, ok := ret.Get(0).(func(uint, *oauth2.Token) *model.OAuthSchema); ok {
		r0 = rf(userID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *oauth2.Token) error); ok {
		r1 = rf(userID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
