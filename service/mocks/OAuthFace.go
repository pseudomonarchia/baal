// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	datatypes "gorm.io/datatypes"
	gorm "gorm.io/gorm"

	jwt "github.com/golang-jwt/jwt/v4"

	mock "github.com/stretchr/testify/mock"

	model "baal/model"

	oauth2 "golang.org/x/oauth2"
)

// OAuthFace is an autogenerated mock type for the OAuthFace type
type OAuthFace struct {
	mock.Mock
}

// CheckTokenAndReplace provides a mock function with given fields: authorizationHeader
func (_m *OAuthFace) CheckTokenAndReplace(authorizationHeader string) (string, bool) {
	ret := _m.Called(authorizationHeader)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(authorizationHeader)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(authorizationHeader)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// CleanToken provides a mock function with given fields: UID
func (_m *OAuthFace) CleanToken(UID string) error {
	ret := _m.Called(UID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(UID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecodeToken provides a mock function with given fields: str
func (_m *OAuthFace) DecodeToken(str string) (*jwt.StandardClaims, error) {
	ret := _m.Called(str)

	var r0 *jwt.StandardClaims
	if rf, ok := ret.Get(0).(func(string) *jwt.StandardClaims); ok {
		r0 = rf(str)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.StandardClaims)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(str)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRefreshTokenFormUID provides a mock function with given fields: token, UID
func (_m *OAuthFace) FindRefreshTokenFormUID(token string, UID string) (*model.OAuthRefreshSchema, error) {
	ret := _m.Called(token, UID)

	var r0 *model.OAuthRefreshSchema
	if rf, ok := ret.Get(0).(func(string, string) *model.OAuthRefreshSchema); ok {
		r0 = rf(token, UID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthRefreshSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, UID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindToken provides a mock function with given fields: UID
func (_m *OAuthFace) FindToken(UID string) *model.OAuthTokenSchema {
	ret := _m.Called(UID)

	var r0 *model.OAuthTokenSchema
	if rf, ok := ret.Get(0).(func(string) *model.OAuthTokenSchema); ok {
		r0 = rf(UID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthTokenSchema)
		}
	}

	return r0
}

// GenerateHashFromUID provides a mock function with given fields: UID
func (_m *OAuthFace) GenerateHashFromUID(UID string) string {
	ret := _m.Called(UID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(UID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateRefreshToken provides a mock function with given fields: OAuthUser, IP
func (_m *OAuthFace) GenerateRefreshToken(OAuthUser *model.OAuthTokenSchema, IP string) (*model.OAuthRefreshSchema, error) {
	ret := _m.Called(OAuthUser, IP)

	var r0 *model.OAuthRefreshSchema
	if rf, ok := ret.Get(0).(func(*model.OAuthTokenSchema, string) *model.OAuthRefreshSchema); ok {
		r0 = rf(OAuthUser, IP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthRefreshSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.OAuthTokenSchema, string) error); ok {
		r1 = rf(OAuthUser, IP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateUID provides a mock function with given fields:
func (_m *OAuthFace) GenerateUID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInfo provides a mock function with given fields: requestURL, token
func (_m *OAuthFace) GetInfo(requestURL string, token *oauth2.Token) (*model.GoogleOAuthUserInfo, error) {
	ret := _m.Called(requestURL, token)

	var r0 *model.GoogleOAuthUserInfo
	if rf, ok := ret.Get(0).(func(string, *oauth2.Token) *model.GoogleOAuthUserInfo); ok {
		r0 = rf(requestURL, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GoogleOAuthUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *oauth2.Token) error); ok {
		r1 = rf(requestURL, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginURL provides a mock function with given fields: requestURL, state
func (_m *OAuthFace) GetLoginURL(requestURL string, state string) string {
	ret := _m.Called(requestURL, state)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(requestURL, state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetToken provides a mock function with given fields: requestURL, code
func (_m *OAuthFace) GetToken(requestURL string, code string) (*oauth2.Token, error) {
	ret := _m.Called(requestURL, code)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(string, string) *oauth2.Token); ok {
		r0 = rf(requestURL, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(requestURL, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashTokenToSHA provides a mock function with given fields: r
func (_m *OAuthFace) HashTokenToSHA(r *datatypes.JSON) []byte {
	ret := _m.Called(r)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*datatypes.JSON) []byte); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// NewState provides a mock function with given fields:
func (_m *OAuthFace) NewState() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: requestURL, token
func (_m *OAuthFace) RefreshToken(requestURL string, token *oauth2.Token) (*oauth2.Token, error) {
	ret := _m.Called(requestURL, token)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(string, *oauth2.Token) *oauth2.Token); ok {
		r0 = rf(requestURL, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *oauth2.Token) error); ok {
		r1 = rf(requestURL, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: userID, UID, token
func (_m *OAuthFace) SaveToken(userID uint, UID string, token *oauth2.Token) (*model.OAuthTokenSchema, error) {
	ret := _m.Called(userID, UID, token)

	var r0 *model.OAuthTokenSchema
	if rf, ok := ret.Get(0).(func(uint, string, *oauth2.Token) *model.OAuthTokenSchema); ok {
		r0 = rf(userID, UID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthTokenSchema)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, *oauth2.Token) error); ok {
		r1 = rf(userID, UID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignToken provides a mock function with given fields: payload, r
func (_m *OAuthFace) SignToken(payload *jwt.StandardClaims, r *datatypes.JSON) string {
	ret := _m.Called(payload, r)

	var r0 string
	if rf, ok := ret.Get(0).(func(*jwt.StandardClaims, *datatypes.JSON) string); ok {
		r0 = rf(payload, r)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UseToken provides a mock function with given fields: tx, token
func (_m *OAuthFace) UseToken(tx *gorm.DB, token model.OAuthTokenSchema) error {
	ret := _m.Called(tx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.OAuthTokenSchema) error); ok {
		r0 = rf(tx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: str, r
func (_m *OAuthFace) ValidateToken(str string, r *datatypes.JSON) (bool, error) {
	ret := _m.Called(str, r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *datatypes.JSON) bool); ok {
		r0 = rf(str, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *datatypes.JSON) error); ok {
		r1 = rf(str, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
